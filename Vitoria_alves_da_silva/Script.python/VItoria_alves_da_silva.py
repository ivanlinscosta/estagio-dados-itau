# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1abMgjQRGnbg_ykbO_gtUdBAL_FNDvcZp
"""

from google.colab import auth
from google.auth import default
import gspread

auth.authenticate_user()
creds,_= default()
gc = gspread.authorize(creds)

import pandas as pd
import numpy as np

df_Ecommerce = pd.read_csv('sample_data/Ecommerce_DBS.csv')

df_Ecommerce

df_Ecommerce.info()

removeColumn = ['Total Purchase Amount','Country','State','Latitude','Longituide']
Ecommerce_Filter = df_Ecommerce.drop(labels = removeColumn,axis = 1)

Ecommerce_Filter .head()

Ecommerce_Filter= Ecommerce_Filter[Ecommerce_Filter['Source'] !='SEM']
Ecommerce_Filter= Ecommerce_Filter[Ecommerce_Filter['Source'] !='Organic Search']

(Ecommerce_Filter[['Source']] == 'SEM').sum()
(Ecommerce_Filter[['Source']] == 'Organic Search').sum()

Ecommerce_Filter

Ecommerce_Filter.info()

data = Ecommerce_Filter.copy()

data['Purchase Date'] = pd.to_datetime(data['Purchase Date'], dayfirst=True)

data.info()

Ecommerce_Filter['Purchase Date'] = pd.to_datetime(Ecommerce_Filter['Purchase Date'], dayfirst=True)

Ecommerce_Filter.info()

del data

Ecommerce_Filter['Purchase Date'].isnull().sum()

Ecommerce_Filter.to_csv('sample_data/Ecommerce_DBS.csv', index=False)

Ecommerce_Filter.head()

#Analisando a base de dados, qual o tipo de público (considerando gênero e idade) e o canal ideal para vender determinado tipo de produto?
products = Ecommerce_Filter.groupby('Product Category')['Quantity'].sum()
resource = products.idxmax()
value = products.max()
print(f'Produto: {resource} \nvalor: {value}')
resource

#Analisando a base de dados, qual o tipo de público (considerando gênero e idade) e o canal ideal para vender determinado tipo de produto?
sale = Ecommerce_Filter.groupby('Product Category')['Quantity'].sum()
sale

#sale = Ecommerce_Filter['Product Category'] == 'Clothing'
soma = Ecommerce_Filter.groupby('Product Category')['Gender'].size()

soma

"""Analisando a base de dados, qual o tipo de público (considerando gênero e idade) e o canal ideal para vender determinado tipo de produto?"""

resumo = Ecommerce_Filter.groupby(['Product Category','Customer Age ','Gender','Source']).size().reset_index()
resumo

#Quantos produtos foram levados vendas foram feitas para cada genero
sales = Ecommerce_Filter.groupby(['Product Category'])['Gender'].size()
sales

Ecommerce_Filter

#Valor total dos produtos produtos adquiridos por cada genero
sal = pd.pivot_table(Ecommerce_Filter,values='Quantity',index='Gender',columns='Product Category',aggfunc='sum').reset_index()
sal

product_age = Ecommerce_Filter.groupby(['Customer Age '])['Product Category'].size().reset_index()
product_purchased = product_age['Product Category'].idxmax()
product_age

product_purchased

network = Ecommerce_Filter.groupby(Ecommerce_Filter['Source'])['Product Category'].size()
network

sales_channel = Ecommerce_Filter.groupby(['Gender', 'Customer Age ', 'Product Category', 'Source'])['Quantity'].sum().reset_index()
sales_channel

planinha_um = gc.open("Produtos mais vendidos")
Produtos = planinha_um.sheet1

Produtos.update([sales_channel.columns.values.tolist()] + sales_channel.fillna(-1).values.tolist())

"""Quais os produtos mais vendidos considerando os últimos 3 anos?"""

table = Ecommerce_Filter[['Product Category','Quantity']]
table

table ['Purchase Date'] = pd.to_datetime(table['Purchase Date'], format= '%Y-%m-%d')

current_date = pd.to_datetime('2023-12-31')
years = current_date - pd.DateOffset(years=3)

filtered_data = table[['Purchase Date'] <= years]
filtered_data

total = table.groupby('Product Category')['Quantity'].sum().reset_index()
total

products_sold = total.sort_values(by='Quantity', ascending=False)
products_sold

planinha_venda = gc.open("Vendas dos ultimos 3 anos")
Produtos_mais_vendidos = planinha_venda.sheet1

Produtos_mais_vendidos .update([products_sold.columns.values.tolist()] + products_sold.fillna(-1).values.tolist())

"""Qual produto mais caro e o mais barato?"""

tabela_valor = Ecommerce_Filter[['Product Category','Product Price','Purchase Date']]
tabela_valor

ultimo_ano = tabela_valor[tabela_valor['Purchase Date'].dt.year == tabela_valor['Purchase Date'].dt.year.max()]
ultimo_ano

produto_minimo = ultimo_ano.min()

produto_maximo = ultimo_ano[ultimo_ano['Product Price'] == ultimo_ano['Product Price'].max()]
produto_minimo = ultimo_ano[ultimo_ano['Product Price'] == ultimo_ano['Product Price'].min()]


extremos = pd.concat([produto_maximo, produto_minimo], ignore_index=True)
extremos

from matplotlib import pyplot as plt
extremos['Product Price'].plot(kind='hist', bins=20, title='Product Price')
plt.gca().spines[['top', 'right',]].set_visible(False)

produto_vendido = gc.open("Vendas produtos")
vendas_produtos = produto_vendido.sheet1

vendas_produtos.update([extremos.columns.values.tolist()] + extremos.fillna(-1).values.tolist())

"""Qual o produto com melho e pior NPS"""

tabela_nps = Ecommerce_Filter.groupby('Product Category')['NPS'].sum().reset_index()
tabela_nps

produto = Ecommerce_Filter.groupby('Product Category')['NPS'].apply(lambda x: ((x >= 9).sum() - (x <= 6).sum()) / len(x) * 100)
nps_maximo = produto.max()
nps_minimo = produto.min()
arrendondar = produto.round(2)
produto_maximo = arrendondar[produto == nps_maximo]
produto_minimo = arrendondar[produto == nps_minimo]
produto_minimo

tabela_nps_extremos = pd.concat([produto_maximo,produto_minimo]).reset_index()
tabela_nps_extremos.columns = ['Product Category', 'NPS']
tabela_nps_extremos

planinha_nps = gc.open("Produto mais caro e barato")
quantidade_nps = planinha_nps.sheet1

quantidade_nps.update([tabela_nps_extremos.columns.values.tolist()] + tabela_nps_extremos.fillna(-1).values.tolist())